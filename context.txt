
```rust ./src/config/config.rs
//! This module contains the configuration structures used for deserializing
//! TOML configuration files, along with custom deserialization logic.

use crate::threading::{self, Scheduler};
use serde::{Deserialize, Deserializer, Serialize};
use std::net::SocketAddr;

/// Main configuration structs based on TOML config file.
#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Config {
    /// List of all servers.
    #[serde(rename = "server")]
    pub servers: Vec<Server>,
}

#[derive(Serialize, Debug, Clone)]
pub struct Server {
    pub listen: Vec<SocketAddr>,
    #[serde(rename = "match")]
    pub patterns: Vec<Pattern>,
    #[serde(default = "default::max_connections")]
    pub max_connections: usize,
    pub name: Option<String>,
    #[serde(skip)]
    pub log_name: String,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Pattern {
    #[serde(default = "default::uri")]
    pub uri: String,
    #[serde(flatten)]
    pub action: Action,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(from = "BackendOption")]
pub struct Backend {
    pub address: SocketAddr,
    pub weight: usize,
}

#[derive(Serialize, Deserialize, Debug, Clone, Copy)]
pub enum Algorithm {
    #[serde(rename = "WRR")]
    Wrr,
}

#[derive(Serialize, Deserialize)]
#[serde(from = "ForwardOption")]
pub struct Forward {
    pub backends: Vec<Backend>,
    pub algorithm: Algorithm,
    #[serde(skip)]
    pub scheduler: Box<dyn Scheduler + Sync + Send>,
}

impl std::fmt::Debug for Forward {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.debug_struct("Forward")
            .field("backends", &self.backends)
            .field("algorithm", &self.algorithm)
            .finish()
    }
}

impl Clone for Forward {
    fn clone(&self) -> Self {
        Self {
            backends: self.backends.clone(),
            algorithm: self.algorithm.clone(),
            scheduler: sched::make(self.algorithm, &self.backends),
        }
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "lowercase")]
pub enum Action {
    Forward(Forward),
    Serve(String),
}

mod default {
    //! Default values for some configuration options.

    pub fn uri() -> String {
        String::from("/")
    }

    pub fn max_connections() -> usize {
        1024
    }
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(untagged)]
enum OneOrMany<T> {
    One(T),
    Many(Vec<T>),
}

impl<T> From<OneOrMany<T>> for Vec<T> {
    fn from(value: OneOrMany<T>) -> Self {
        match value {
            OneOrMany::One(item) => vec![item],
            OneOrMany::Many(items) => items,
        }
    }
}

fn one_or_many<'de, T, D>(deserializer: D) -> Result<Vec<T>, D::Error>
where
    T: Deserialize<'de>,
    D: Deserializer<'de>,
{
    Ok(OneOrMany::deserialize(deserializer)?.into())
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(untagged)]
enum BackendOption {
    Simple(SocketAddr),
    Weighted { address: SocketAddr, weight: usize },
}

impl From<BackendOption> for Backend {
    fn from(value: BackendOption) -> Self {
        let (address, weight) = match value {
            BackendOption::Simple(address) => (address, 1),
            BackendOption::Weighted { address, weight } => (address, weight),
        };
        Self { address, weight }
    }
}

#[derive(Serialize, Deserialize, Debug)]
#[serde(untagged)]
enum ForwardOption {
    #[serde(deserialize_with = "one_or_many")]
    Simple(Vec<Backend>),
    WithAlgorithm {
        algorithm: Algorithm,
        backends: Vec<Backend>,
    },
}

impl From<ForwardOption> for Forward {
    fn from(value: ForwardOption) -> Self {
        let (backends, algorithm) = match value {
            ForwardOption::Simple(backends) => (backends, Algorithm::Wrr),
            ForwardOption::WithAlgorithm {
                algorithm,
                backends,
            } => (backends, algorithm),
        };
        let scheduler = sched::make(algorithm, &backends);
        Self {
            backends,
            algorithm,
            scheduler,
        }
    }
}

impl<'de> Deserialize<'de> for Server {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_struct("Server", &["listen", "patterns"], ServerVisitor)
    }
}

struct ServerVisitor;

#[derive(Deserialize)]
#[serde(field_identifier, rename_all = "lowercase")]
enum Field {
    Listen,
    Match,
    Forward,
    Serve,
    Uri,
    Name,
    Connections,
}

enum Error {
    MixedSimpleAndMatch,
    MixedActions,
    MissingConfig,
}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let message = match self {
            Error::MixedSimpleAndMatch => {
                "either use 'match' for multiple patterns or describe a single pattern"
            }
            Error::MixedActions => {
                "use either 'forward' or 'serve', if you need multiple patterns use 'match'"
            }
            Error::MissingConfig => "missing 'match' or simple configuration",
        };
        f.write_str(message)
    }
}

impl<'de> serde::de::Visitor<'de> for ServerVisitor {
    type Value = Server;

    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
        formatter.write_str("at least 'listen' and 'forward' or 'serve' fields")
    }

    fn visit_map<M>(self, mut map: M) -> Result<Self::Value, M::Error>
    where
        M: serde::de::MapAccess<'de>,
    {
        let mut listen = vec![];
        let mut patterns = vec![];
        let mut simple_pattern: Option<Pattern> = None;
        let mut name = None;
        let mut max_connections = default::max_connections();
        let mut uri = default::uri();

        while let Some(key) = map.next_key()? {
            match key {
                Field::Listen => {
                    if !listen.is_empty() {
                        return Err(serde::de::Error::duplicate_field("listen"));
                    }
                    listen = map.next_value::<OneOrMany<SocketAddr>>()?.into();
                }
                Field::Match => {
                    if !patterns.is_empty() {
                        return Err(serde::de::Error::duplicate_field("match"));
                    }
                    if simple_pattern.is_some() {
                        return Err(serde::de::Error::custom(Error::MixedSimpleAndMatch));
                    }
                    patterns = map.next_value()?;
                }
                Field::Forward => {
                    if !patterns.is_empty() {
                        return Err(serde::de::Error::custom(Error::MixedSimpleAndMatch));
                    }
                    if let Some(pattern) = simple_pattern.take() {
                        match pattern.action {
                            Action::Forward(_) => {
                                return Err(serde::de::Error::duplicate_field("forward"))
                            }
                            Action::Serve(_) => {
                                return Err(serde::de::Error::custom(Error::MixedActions))
                            }
                        }
                    }
                    simple_pattern = Some(Pattern {
                        uri: default::uri(),
                        action: Action::Forward(map.next_value()?),
                    });
                }
                Field::Serve => {
                    if !patterns.is_empty() {
                        return Err(serde::de::Error::custom(Error::MixedSimpleAndMatch));
                    }
                    if let Some(pattern) = simple_pattern.take() {
                        match pattern.action {
                            Action::Forward(_) => {
                                return Err(serde::de::Error::custom(Error::MixedActions))
                            }
                            Action::Serve(_) => {
                                return Err(serde::de::Error::duplicate_field("serve"))
                            }
                        }
                    }
                    simple_pattern = Some(Pattern {
                        uri: default::uri(),
                        action: Action::Serve(map.next_value()?),
                    });
                }
                Field::Uri => {
                    if !patterns.is_empty() {
                        return Err(serde::de::Error::custom(Error::MixedSimpleAndMatch));
                    }
                    uri = map.next_value()?;
                }
                Field::Name => {
                    if name.is_some() {
                        return Err(serde::de::Error::duplicate_field("name"));
                    }
                    name = Some(map.next_value()?);
                }
                Field::Connections => {
                    max_connections = map.next_value()?;
                }
            }
        }

        if let Some(mut pattern) = simple_pattern.take() {
            pattern.uri = uri;
            patterns.push(pattern);
        }

        if patterns.is_empty() {
            return Err(serde::de::Error::custom(Error::MissingConfig));
        }

        if listen.is_empty() {
            return Err(serde::de::Error::missing_field("listen"));
        }

        Ok(Server {
            listen,
            patterns,
            max_connections,
            name,
            log_name: String::from("unnamed"),
        })
    }
}
```

```rust ./src/config/mod.rs
//! Structs and enums derived from the config file using [`serde`].
mod config;
pub use config::{Action, Algorithm, Backend, Config, Forward, Pattern, Server};
```

```rust ./src/lib.rs
// src/lib.rs
// #![feature(ptr_from_ref)]
// #![feature(is_some_and)]

pub mod config;
mod server;
mod service;
mod sync;
pub mod threading;

use std::io;

/// RXH version.
pub const VERSION: &str = env!("CARGO_PKG_VERSION");

/// Top level error to use for return types in the public API and main function.
#[derive(Debug)]
pub enum Error {
    /// Mostly related to reading or writing on sockets.
    Io(io::Error),

    /// An error while deserializing the config file.
    Toml(toml::de::Error),

    /// Error while processing HTTP requests.
    Http(hyper::Error),
}

impl std::error::Error for Error {}

impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::Io(err) => write!(f, "IO error: {err}"),
            Error::Toml(err) => write!(f, "TOML parse error: {err}"),
            Error::Http(err) => write!(f, "HTTP error: {err}"),
        }
    }
}

impl From<io::Error> for Error {
    fn from(value: io::Error) -> Self {
        Error::Io(value)
    }
}

impl From<toml::de::Error> for Error {
    fn from(value: toml::de::Error) -> Self {
        Error::Toml(value)
    }
}

impl From<hyper::Error> for Error {
    fn from(value: hyper::Error) -> Self {
        Error::Http(value)
    }
}
```

```rust ./src/server/server.rs
use std::{future::Future, io, net::SocketAddr, pin::Pin, ptr, sync::Arc};

use tokio::{
    net::{TcpListener, TcpSocket},
    sync::{watch, Semaphore},
};

use crate::{
    config,
    rxh::Rxh,
    sync::notify::{Notification, Notifier},
};

pub struct Server {
    state: watch::Sender<State>,
    listener: TcpListener,
    config: config::Server,
    address: SocketAddr,
    notifier: Notifier,
    shutdown: Pin<Box<dyn Future<Output = ()> + Send>>,
    connections: Arc<Semaphore>,
}

/// Represents the current state of the server.
#[derive(Debug, PartialEq, Eq)]
pub enum State {
    Starting,
    Listening,
    MaxConnectionsReached(usize),
    ShuttingDown(ShutdownState),
}

/// Represents a state in the graceful shutdown process.
#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub enum ShutdownState {
    PendingConnections(usize),
    Done,
}

impl Server {
    /// Initializes a server with the given configuration.
    pub fn init(config: config::Server, replica: usize) -> Result<Self, io::Error> {
        let (state, _) = watch::channel(State::Starting);

        let socket = if config.listen[replica].is_ipv4() {
            TcpSocket::new_v4()?
        } else {
            TcpSocket::new_v6()?
        };

        #[cfg(not(windows))]
        socket.set_reuseaddr(true)?;

        socket.bind(config.listen[replica])?;
        let listener = socket.listen(1024)?;
        let address = listener.local_addr().unwrap();
        let notifier = Notifier::new();
        let shutdown = Box::pin(std::future::pending());
        let connections = Arc::new(Semaphore::new(config.max_connections));

        Ok(Self {
            state,
            listener,
            config,
            address,
            notifier,
            shutdown,
            connections,
        })
    }

    /// Sets a termination future for server shutdown.
    pub fn shutdown_on(mut self, future: impl Future + Send + 'static) -> Self {
        self.shutdown = Box::pin(async move {
            future.await;
        });
        self
    }

    /// Gets the socket address of the listener.
    pub fn socket_address(&self) -> SocketAddr {
        self.address
    }

    /// Subscribes to server state updates.
    pub fn subscribe(&self) -> watch::Receiver<State> {
        self.state.subscribe()
    }

    /// Begins accepting connections and running the server.
    pub async fn run(self) -> Result<(), crate::Error> {
        let Self {
            mut config,
            state,
            listener,
            notifier,
            shutdown,
            address,
            connections,
        } = self;

        let log_name = if let Some(ref id) = config.name {
            format!("{address} ({id})")
        } else {
            address.to_string()
        };

        config.log_name = log_name.clone();

        state.send_replace(State::Listening);
        println!("{log_name} => Listening for requests");

        let config = Box::leak(Box::new(config));

        let listener = Listener {
            config,
            connections,
            listener,
            notifier: &notifier,
            state: &state,
        };

        tokio::select! {
            result = listener.listen() => {
                if let Err(err) = result {
                    println!("{log_name} => Error while accepting connections: {err}");
                }
            }
            _ = shutdown => {
                println!("{log_name} => Received shutdown signal");
            }
        }

        drop(listener);

        if let Ok(num_tasks) = notifier.send(Notification::Shutdown) {
            println!("{log_name} => Can't shutdown yet, {num_tasks} pending connections");
            state.send_replace(State::ShuttingDown(ShutdownState::PendingConnections(
                num_tasks,
            )));
            notifier.collect_acknowledgements().await;
        }

        unsafe {
            drop(Box::from_raw(ptr::from_ref(config).cast_mut()));
        }

        state.send_replace(State::ShuttingDown(ShutdownState::Done));
        println!("{log_name} => Shutdown complete");

        Ok(())
    }
}

struct Listener<'a> {
    listener: TcpListener,
    config: &'static config::Server,
    notifier: &'a Notifier,
    state: &'a watch::Sender<State>,
    connections: Arc<Semaphore>,
}

impl<'a> Listener<'a> {
    pub async fn listen(&self) -> Result<(), crate::Error> {
        loop {
            let config = self.config;
            let mut notify_listening_again = false;

            if self.connections.available_permits() == 0 {
                println!(
                    "{} => Reached max connections: {}",
                    config.log_name, config.max_connections
                );
                self.state
                    .send_replace(State::MaxConnectionsReached(config.max_connections));
                notify_listening_again = true;
            }

            let permit = self.connections.clone().acquire_owned().await.unwrap();

            if notify_listening_again {
                println!("{} => Accepting connections again", config.log_name);
                self.state.send_replace(State::Listening);
            }

            let (stream, client_addr) = self.listener.accept().await?;
            let mut subscription = self.notifier.subscribe();
            let server_addr = stream.local_addr()?;

            tokio::task::spawn(async move {
                if let Err(err) = hyper::server::conn::http1::Builder::new()
                    .preserve_header_case(true)
                    .title_case_headers(true)
                    .serve_connection(stream, Rxh::new(config, client_addr, server_addr))
                    .with_upgrades()
                    .await
                {
                    println!("Failed to serve connection: {:?}", err);
                }

                if let Some(Notification::Shutdown) = subscription.receive_notification() {
                    subscription.acknowledge_notification().await;
                }

                drop(permit);
            });
        }
    }
}
```

```rust ./src/server/mod.rs
//! This module defines the main server architecture, organizing tasks and handling requests.

mod main;
mod server;

pub use main::Master;
pub use server::{Server, ShutdownState, State};
```

```rust ./src/server/main.rs
use std::future::{self, Future};
use std::net::SocketAddr;
use std::pin::Pin;

use tokio::sync::{broadcast, watch};

use crate::{config::Config, Server, State};

/// The master task is responsible for creating, spawning, and shutting down all the server instances described in the configuration file.
pub struct Master {
    servers: Vec<Server>,
    states: Vec<(SocketAddr, watch::Receiver<State>)>,
    shutdown: Pin<Box<dyn Future<Output = ()> + Send>>,
    shutdown_notify: broadcast::Sender<()>,
}

impl Master {
    /// Attempts to initialize all the servers specified in the configuration file.
    pub fn init(config: Config) -> Result<Self, crate::Error> {
        let mut servers = Vec::new();
        let mut states = Vec::new();
        let shutdown = Box::pin(future::pending());
        let (shutdown_notify, _) = broadcast::channel(1);

        for server_config in config.servers {
            for replica in 0..server_config.listen.len() {
                let server = Server::init(server_config.clone(), replica)?;
                states.push((server.socket_address(), server.subscribe()));
                servers.push(server);
            }
        }

        Ok(Self {
            servers,
            states,
            shutdown,
            shutdown_notify,
        })
    }

    /// Sets a future to initiate termination when `future` completes.
    pub fn shutdown_on(mut self, future: impl Future + Send + 'static) -> Self {
        self.servers = self
            .servers
            .into_iter()
            .map(|server| {
                let mut shutdown_notification = self.shutdown_notify.subscribe();
                server.shutdown_on(async move { shutdown_notification.recv().await })
            })
            .collect();

        self.shutdown = Box::pin(async move {
            future.await;
        });

        self
    }

    /// Runs all servers and initiates termination when the shutdown future completes.
    pub async fn run(self) -> Result<(), crate::Error> {
        let mut set = tokio::task::JoinSet::new();

        for server in self.servers {
            set.spawn(server.run());
        }

        let mut first_error = None;

        tokio::select! {
            Some(Ok(Err(err))) = set.join_next() => {
                first_error = Some(err);
                println!("Master => Received error while waiting for shutdown");
            }

            _ = self.shutdown => {
                println!("Master => Sending shutdown signal to all servers");
            }
        }

        self.shutdown_notify.send(()).unwrap();

        while let Some(result) = set.join_next().await {
            if let Err(err) = result.unwrap() {
                first_error.get_or_insert(err);
            }
        }

        match first_error {
            None => Ok(()),
            Some(err) => Err(crate::Error::from(err)),
        }
    }

    /// Returns the addresses of all listening sockets.
    pub fn sockets(&self) -> Vec<SocketAddr> {
        self.states.iter().map(|(addr, _)| *addr).collect()
    }
}
```

```rust ./src/main.rs
#[tokio::main]
async fn main() -> Result<(), xnav::Error> {
    let config = toml::from_str(&tokio::fs::read_to_string("config.toml").await?)?;
    xnav::Master::init(config)?
        .shutdown_on(tokio::signal::ctrl_c())
        .run()
        .await
}
```

```rust ./src/sync/sync.rs
//! Message passing abstractions for sending notifications to Tokio tasks and
//! awaiting their acknowledgement, which is useful for graceful shutdowns.

use tokio::sync::{broadcast, mpsc};

/// Message that can be sent as a notification to Tokio tasks.
#[derive(Clone, Copy, Debug)]
pub enum Notification {
    Shutdown,
}

/// Notifier object that can send messages to its subscribers.
pub struct Notifier {
    /// Sender half of the notifications channel.
    notification_sender: broadcast::Sender<Notification>,
    /// Receiver part of the acknowledgements channel.
    acknowledge_receiver: mpsc::Receiver<()>,
    /// Sender part of the acknowledgements channel.
    acknowledge_sender: mpsc::Sender<()>,
}

/// Used by subscribers to obtain a notification from a [`Notifier`] and
/// acknowledge receipt when possible.
pub struct Subscription {
    /// Receiver half of the notifications channel.
    notification_receiver: broadcast::Receiver<Notification>,
    /// Sender half of the acknowledgements channel.
    acknowledge_sender: mpsc::Sender<()>,
}

impl Notifier {
    /// Creates a new [`Notifier`] with all the channels set up.
    pub fn new() -> Self {
        let (notification_sender, _) = broadcast::channel(1);
        let (acknowledge_sender, acknowledge_receiver) = mpsc::channel(1);

        Self {
            notification_sender,
            acknowledge_sender,
            acknowledge_receiver,
        }
    }

    /// By subscribing to this [`Notifier`] the caller obtains a
    /// [`Subscription`] object that can be used to receive a [`Notification`].
    pub fn subscribe(&self) -> Subscription {
        let notification_receiver = self.notification_sender.subscribe();
        let acknowledge_sender = self.acknowledge_sender.clone();

        Subscription::new(notification_receiver, acknowledge_sender)
    }

    /// Sends a [`Notification`] to all subscribers.
    pub fn send(
        &self,
        notification: Notification,
    ) -> Result<usize, broadcast::error::SendError<Notification>> {
        self.notification_sender.send(notification)
    }

    /// Waits for all the subscribers to acknowledge the last sent
    /// [`Notification`].
    pub async fn collect_acknowledgements(self) {
        let Self {
            notification_sender,
            mut acknowledge_receiver,
            acknowledge_sender,
        } = self;

        // Drop the acknowledge_sender sender to allow the channel to be closed
        drop(acknowledge_sender);

        // Wait for all acks one by one.
        while let Some(_) = acknowledge_receiver.recv().await {}

        drop(notification_sender);
    }
}

impl Subscription {
    /// Creates a new [`Subscription`] object.
    pub fn new(
        notification_receiver: broadcast::Receiver<Notification>,
        acknowledge_sender: mpsc::Sender<()>,
    ) -> Self {
        Self {
            notification_receiver,
            acknowledge_sender,
        }
    }

    /// Reads the notifications channel to check if a notification was sent.
    pub fn receive_notification(&mut self) -> Option<Notification> {
        self.notification_receiver.try_recv().ok()
    }

    /// Sends an acknowledgment on the acknowledgements channel.
    pub async fn acknowledge_notification(&self) {
        self.acknowledge_sender.send(()).await.unwrap();
    }
}
```

```rust ./src/sync/ring.rs
use std::sync::atomic::{AtomicUsize, Ordering};

/// Provides circular read-only access to the elements of an array. This is used
/// for schedulers, since some of them can pre-compute a complete cycle and then
/// return elements from that cycle when needed. For example, a WRR scheduler
/// for 3 servers A, B and C with weights 1, 3 and 2 might compute the next
/// cycle: `[A, B, B, B, C, C]`. When the scheduler is asked for the next server
/// that should handle a request (see [`crate::sched`]), it only needs to return
/// a value from the cycle array. When it returns the last value, it can start
/// again from the beginning because all cycles are equal. The only caveat is
/// that the calculation of the next index has to be atomic since multiple
/// threads can process requests at the same time.
#[derive(Debug)]
pub(crate) struct Ring<T> {
    /// All the elements in this ring.
    values: Vec<T>,

    /// Index of the next value that we should return.
    next: AtomicUsize,
}

impl<T> Ring<T> {
    /// Creates a new [`Ring`]. The first value returned when calling one of
    /// the getter functions is going to be located at index 0 in `values` vec.
    /// Subsequent calls to any getter will return the value at the next index
    /// until the last one is reached, after that it starts again from the
    /// beginning. Note that `values` must have a length greater than 0, in
    /// other words it cannot be an empty [`Vec`].
    pub fn new(values: Vec<T>) -> Self {
        assert!(values.len() > 0, "Ring<T> doesn't work with empty Vec<T>");
        Self {
            values,
            next: AtomicUsize::new(0),
        }
    }
}

impl<T> Ring<T> {
    /// Computes the index of the next value that has to be returned.
    #[inline]
    fn next_index(&self) -> usize {
        if self.values.len() == 1 {
            0
        } else {
            self.next.fetch_add(1, Ordering::Relaxed) % self.values.len()
        }
    }

    /// Returns a reference to the next value in the ring.
    #[inline]
    pub fn next_as_ref(&self) -> &T {
        &self.values[self.next_index()]
    }
}

impl<T: Copy> Ring<T> {
    /// Returns the next value in the ring by making a copy.
    #[inline]
    pub fn next_as_owned(&self) -> T {
        *self.next_as_ref()
    }
}

impl<T: Clone> Ring<T> {
    /// Returns the next value in the ring by cloning it.
    #[allow(dead_code)]
    #[inline]
    pub fn next_as_cloned(&self) -> T {
        self.next_as_ref().clone()
    }
}
```

```rust ./src/sync/mod.rs
//! Custom synchronization primitives for RXH.

mod ring;

pub use ring::Ring;
pub use Ring::{Notification, Notifier, Subscription};
```

```rust ./src/service/response.rs
//! Types and abstractions for HTTP responses.

use bytes::Bytes;
use http_body_util::combinators::BoxBody;
use hyper::{
    header::{self, HeaderValue},
    Response,
};

pub type BoxBodyResponse = Response<BoxBody<Bytes, hyper::Error>>;

/// Response sent back to the client at the end of the proxying process.
pub struct ProxyResponse<T> {
    response: Response<T>,
}

impl<T> ProxyResponse<T> {
    pub fn new(response: Response<T>) -> Self {
        Self { response }
    }

    pub fn into_forwarded(mut self) -> Response<T> {
        self.response.headers_mut().insert(
            header::SERVER,
            HeaderValue::from_str(crate::rxh_server_header().as_str()).unwrap(),
        );
        self.response
    }
}

/// HTTP response originated on this server.
pub struct LocalResponse;

impl LocalResponse {
    pub fn builder() -> http::response::Builder {
        Response::builder().header(header::SERVER, crate::rxh_server_header())
    }

    pub fn not_found() -> BoxBodyResponse {
        Self::builder()
            .status(http::StatusCode::NOT_FOUND)
            .header(header::CONTENT_TYPE, "text/plain")
            .body(crate::full("HTTP 404 NOT FOUND"))
            .unwrap()
    }

    pub fn bad_gateway() -> BoxBodyResponse {
        Self::builder()
            .status(http::StatusCode::BAD_GATEWAY)
            .header(header::CONTENT_TYPE, "text/plain")
            .body(crate::full("HTTP 502 BAD GATEWAY"))
            .unwrap()
    }
}

pub fn rxh_server_header() -> String {
    format!("rxh/{}", crate::VERSION)
}
```

```rust ./src/service/request.rs
//! Proxy requests require additional information attached to them.

use std::net::SocketAddr;
use http::{Extensions, HeaderMap};
use hyper::{header, Request, upgrade::OnUpgrade};

/// Request received by this proxy from a client.
pub struct ProxyRequest<T> {
    request: Request<T>,
    client_addr: SocketAddr,
    server_addr: SocketAddr,
    proxy_id: Option<String>,
}

impl<T> ProxyRequest<T> {
    pub fn new(request: Request<T>, client_addr: SocketAddr, server_addr: SocketAddr, proxy_id: Option<String>) -> Self {
        Self {
            request,
            client_addr,
            server_addr,
            proxy_id,
        }
    }

    pub fn headers(&self) -> &HeaderMap {
        self.request.headers()
    }

    pub fn extensions_mut(&mut self) -> &mut Extensions {
        self.request.extensions_mut()
    }

    pub fn into_forwarded(mut self) -> Request<T> {
        let host = if let Some(value) = self.request.headers().get(header::HOST) {
            match value.to_str() {
                Ok(host) => String::from(host),
                Err(_) => self.server_addr.to_string(),
            }
        } else {
            self.server_addr.to_string()
        };

        let by = self.proxy_id.unwrap_or(self.server_addr.to_string());

        let mut forwarded = format!("for={};by={};host={}", self.client_addr, by, host);

        if let Some(value) = self.request.headers().get(header::FORWARDED) {
            if let Ok(previous_proxies) = value.to_str() {
                forwarded = format!("{previous_proxies}, {forwarded}");
            }
        }

        self.request.headers_mut().insert(
            header::FORWARDED,
            header::HeaderValue::from_str(&forwarded).unwrap(),
        );

        self.request
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    fn forwarded_header<T>(request: &Request<T>) -> String {
        let forwarded = request
            .headers()
            .get(header::FORWARDED)
            .unwrap()
            .to_str()
            .unwrap();

        String::from(forwarded)
    }

    #[test]
    fn forwarded_request() {
        let client = "127.0.0.1:8000".parse().unwrap();
        let proxy = "127.0.0.1:9000".parse().unwrap();

        let request = ProxyRequest::new(
            Request::builder().body(crate::full("")).unwrap(),
            client,
            proxy,
            None,
        );

        let forwarded = request.into_forwarded();
        let expected = format!("for={client};by={proxy};host={proxy}");

        assert!(forwarded.headers().contains_key(header::FORWARDED));
        assert_eq!(forwarded_header(&forwarded), expected.as_str());
    }

    #[test]
    fn forwarded_request_with_proxy_id() {
        let client = "127.0.0.1:8000".parse().unwrap();
        let proxy = "127.0.0.1:9000".parse().unwrap();
        let proxy_id = String::from("rxh/main");

        let request = ProxyRequest::new(
            Request::builder().body(crate::full("")).unwrap(),
            client,
            proxy,
            Some(proxy_id.clone()),
        );

        let forwarded = request.into_forwarded();
        let expected = format!("for={client};by={proxy_id};host={proxy}");

        assert!(forwarded.headers().contains_key(header::FORWARDED));
        assert_eq!(forwarded_header(&forwarded), expected.as_str());
    }
}```

```rust ./src/service/proxy.rs
//! Proxy specific sub-service.

use crate::request::ProxyRequest;
use crate::response::{BoxBodyResponse, LocalResponse, ProxyResponse};
use http_body_util::BodyExt;
use hyper::{body::Incoming, header, upgrade::OnUpgrade};
use std::net::SocketAddr;
use tokio::net::TcpStream;

/// Forwards the request to the target server and returns the response.
pub async fn forward(
    mut request: ProxyRequest<Incoming>,
    to: SocketAddr,
) -> Result<BoxBodyResponse, hyper::Error> {
    let Ok(stream) = TcpStream::connect(to).await else {
        return Ok(LocalResponse::bad_gateway());
    };

    let (mut sender, conn) = hyper::client::conn::http1::Builder::new()
        .preserve_header_case(true)
        .title_case_headers(true)
        .handshake(stream)
        .await?;

    tokio::task::spawn(async move {
        if let Err(err) = conn.await {
            println!("Connection failed: {:?}", err);
        }
    });

    let mut maybe_client_upgrade = None;

    if request.headers().contains_key(header::UPGRADE) {
        let upgrade = request.extensions_mut().remove::<OnUpgrade>().unwrap();
        maybe_client_upgrade = Some(upgrade);
    }

    let mut response = sender.send_request(request.into_forwarded()).await?;

    if response.status() == http::StatusCode::SWITCHING_PROTOCOLS {
        if let Some(client_upgrade) = maybe_client_upgrade {
            let server_upgrade = response.extensions_mut().remove::<OnUpgrade>().unwrap();
            tokio::task::spawn(tunnel(client_upgrade, server_upgrade));
        } else {
            return Ok(LocalResponse::bad_gateway());
        }
    }

    Ok(ProxyResponse::new(response.map(|body| body.boxed())).into_forwarded())
}

/// TCP tunnel for upgraded connections.
async fn tunnel(client: OnUpgrade, server: OnUpgrade) {
    let (mut upgraded_client, mut upgraded_server) = tokio::try_join!(client, server).unwrap();

    match tokio::io::copy_bidirectional(&mut upgraded_client, &mut upgraded_server).await {
        Ok((client_bytes, server_bytes)) => {
            println!("Client wrote {client_bytes} bytes, server wrote {server_bytes} bytes")
        }
        Err(err) => eprintln!("Tunnel error: {err}"),
    }
}
```

```rust ./src/service/body.rs
//! Utilities for creating common request and response bodies.

use bytes::Bytes;
use http_body_util::{combinators::BoxBody, BodyExt, Empty, Full};

/// Single chunk body.
pub fn full<T: Into<Bytes>>(chunk: T) -> BoxBody<Bytes, hyper::Error> {
    Full::new(chunk.into())
        .map_err(|never| match never {})
        .boxed()
}

#[allow(dead_code)]
pub fn empty() -> BoxBody<Bytes, hyper::Error> {
    Empty::<Bytes>::new()
        .map_err(|never| match never {})
        .boxed()
}
```

```rust ./src/service/files.rs
//! Static files server sub-service.

use crate::response::{BoxBodyResponse, LocalResponse};
use hyper::header;
use std::path::Path;

/// Returns an HTTP response whose body is the content of a file.
pub async fn transfer(path: &str, root: &str) -> Result<BoxBodyResponse, hyper::Error> {
    let Ok(directory) = Path::new(root).canonicalize() else {
        return Ok(LocalResponse::not_found());
    };

    let Ok(file) = directory.join(path).canonicalize() else {
        return Ok(LocalResponse::not_found());
    };

    if !file.starts_with(&directory) || !file.is_file() {
        return Ok(LocalResponse::not_found());
    }

    let content_type = match file.extension().and_then(|e| e.to_str()).unwrap_or("txt") {
        "html" => "text/html",
        "css" => "text/css",
        "js" => "application/javascript",
        "png" => "image/png",
        "jpeg" => "image/jpeg",
        _ => "text/plain",
    };

    match tokio::fs::read(file).await {
        Ok(content) => Ok(LocalResponse::builder()
            .header(header::CONTENT_TYPE, content_type)
            .body(crate::full(content))
            .unwrap()),
        Err(_) => Ok(LocalResponse::not_found()),
    }
}
```

```rust ./src/service/mod.rs
//! Proxy server module, handling HTTP requests, serving static files, and proxying to backend servers.

mod body;
mod files;
mod proxy;
mod request;
mod response;

pub use body::{empty, full};
pub use files::transfer;
pub use proxy::forward;
pub use request::ProxyRequest;
pub use response::{BoxBodyResponse, LocalResponse, ProxyResponse};
```

```rust ./src/threading/mod.rs
//! Load balancing and scheduler implementations.
mod wrr;

pub use wrr::WeightedRoundRobin;

use crate::config::{Algorithm, Backend};

/// A scheduler provides an algorithm for load balancing between multiple
/// backend servers.
pub trait Scheduler {
    /// Returns the address of the server that should process the next request.
    fn next_server(&self) -> std::net::SocketAddr;
}

/// [`Scheduler`] factory.
pub fn make(algorithm: Algorithm, backends: &Vec<Backend>) -> Box<dyn Scheduler + Send + Sync> {
    Box::new(match algorithm {
        Algorithm::Wrr => WeightedRoundRobin::new(backends),
    })
}
```

```rust ./src/threading/wrr.rs
use std::net::SocketAddr;

use super::Scheduler;
use crate::{config::Backend, sync::ring::Ring};

/// Classical Weighted Round Robin (WRR) algorithm.
#[derive(Debug)]
pub struct WeightedRoundRobin {
    /// Pre-computed complete cycle of requests.
    cycle: Ring<SocketAddr>,
}

impl WeightedRoundRobin {
    /// Creates and initializes a new [`WeightedRoundRobin`] scheduler.
    pub fn new(backends: &Vec<Backend>) -> Self {
        let mut cycle = Vec::new();

        // TODO: Interleaved WRR
        for backend in backends {
            let mut weight = backend.weight;
            while weight > 0 {
                cycle.push(backend.address);
                weight -= 1;
            }
        }

        Self {
            cycle: Ring::new(cycle),
        }
    }
}

impl Scheduler for WeightedRoundRobin {
    fn next_server(&self) -> SocketAddr {
        self.cycle.next_as_owned()
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn weighted_round_robin() {
        let backends = vec![
            ("127.0.0.1:8080", 1),
            ("127.0.0.1:8081", 3),
            ("127.0.0.1:8082", 2),
        ];

        let expected = vec![
            "127.0.0.1:8080",
            "127.0.0.1:8081",
            "127.0.0.1:8081",
            "127.0.0.1:8081",
            "127.0.0.1:8082",
            "127.0.0.1:8082",
        ];

        let wrr = WeightedRoundRobin::new(
            &backends
                .iter()
                .map(|(addr, weight)| Backend {
                    address: addr.parse().unwrap(),
                    weight: *weight,
                })
                .collect(),
        );

        for server in expected {
            assert_eq!(server, wrr.next_server().to_string());
        }
    }
}
```

